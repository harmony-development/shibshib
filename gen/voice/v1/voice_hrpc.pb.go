// Code generated by protoc-gen-go-hrpc. DO NOT EDIT.

package voicev1

import (
	context "context"
	errors "errors"
	server "github.com/harmony-development/hrpc/server"
	proto "google.golang.org/protobuf/proto"
)

type VoiceServiceServer interface {
	// Endpoint to stream messages between client and server.
	//
	// - One StreamMessage stream corresponds to being in one voice channel.
	// - It's recommended that users should not be able to be in more than one voice channel,
	// but this limitation is left up to the server implementation.
	StreamMessage(context.Context, chan *StreamMessageRequest) (chan *StreamMessageResponse, error)
}

type DefaultVoiceService struct{}

func (DefaultVoiceService) StreamMessage(context.Context, chan *StreamMessageRequest) (chan *StreamMessageResponse, error) {
	return nil, errors.New("unimplemented")
}

type VoiceServiceHandler struct {
	Server VoiceServiceServer
}

func NewVoiceServiceHandler(server VoiceServiceServer) *VoiceServiceHandler {
	return &VoiceServiceHandler{Server: server}
}
func (h *VoiceServiceHandler) Name() string {
	return "VoiceService"
}
func (h *VoiceServiceHandler) Routes() map[string]server.RawHandler {
	return map[string]server.RawHandler{
		"/protocol.voice.v1.VoiceService/StreamMessage": server.NewStreamingHandler(&StreamMessageRequest{}, func(c context.Context, req chan proto.Message) (chan proto.Message, error) {
			res, err := h.Server.StreamMessage(c, req.(chan *StreamMessageRequest))
			return res.(chan proto.Message), err
		}),
	}
}
